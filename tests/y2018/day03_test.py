import pytest

from solutions.y2018.day03 import claim_not_overlaped
from solutions.y2018.day03 import shared_squares

INPUT1 = [
    ('#1 @ 1,3: 4x4\n#2 @ 3,1: 4x4\n#3 @ 5,5: 2x2\n', 4),
    ('#1 @ 1,3: 4x4\n#2 @ 3,1: 4x4\n#3 @ 4,5: 3x2\n', 6),
    ('#1 @ 1,3: 4x4\n#2 @ 2,1: 5x4\n#3 @ 4,5: 3x2\n', 8),
]


@pytest.fixture(params=INPUT1)
def input1(request):
    return request.param


class TestDay03Part01:
    """
    Test cases
    [['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '.', '2', '2', '2', '2'],
     ['.', '.', '.', '2', '2', '2', '2'],
     ['.', '1', '1', 'x', 'x', '2', '2'],
     ['.', '1', '1', 'x', 'x', '2', '2'],
     ['.', '1', '1', '1', '1', '3', '3'],
     ['.', '1', '1', '1', '1', '3', '3']]

    [['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '.', '2', '2', '2', '2'],
     ['.', '.', '.', '2', '2', '2', '2'],
     ['.', '1', '1', 'x', 'x', '2', '2'],
     ['.', '1', '1', 'x', 'x', '2', '2'],
     ['.', '1', '1', '1', 'x', '3', '3'],
     ['.', '1', '1', '1', 'x', '3', '3']]

    [['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '2', '2', '2', '2', '2'],
     ['.', '.', '2', '2', '2', '2', '2'],
     ['.', '1', 'x', 'x', 'x', '2', '2'],
     ['.', '1', 'x', 'x', 'x', '2', '2'],
     ['.', '1', '1', '1', 'x', '3', '3'],
     ['.', '1', '1', '1', 'x', '3', '3']]
     """

    def test_shared_squares(self, input1):
        input_str, expected = input1
        assert shared_squares(input_str) == expected


INPUT2 = [
    ('#1 @ 1,3: 4x4\n#2 @ 3,1: 4x4\n#3 @ 5,5: 2x2\n', 3),
    ('#1 @ 1,3: 2x4\n#2 @ 3,1: 4x4\n#3 @ 4,4: 2x3\n', 1),
]


@pytest.fixture(params=INPUT2)
def input2(request):
    return request.param


class TestDay03Part02:
    """
    Test cases
    [['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '.', '2', '2', '2', '2'],
     ['.', '.', '.', '2', '2', '2', '2'],
     ['.', '1', '1', 'x', 'x', '2', '2'],
     ['.', '1', '1', 'x', 'x', '2', '2'],
     ['.', '1', '1', '1', '1', '3', '3'],
     ['.', '1', '1', '1', '1', '3', '3']]

    [['.', '.', '.', '.', '.', '.', '.'],
     ['.', '.', '.', '2', '2', '2', '2'],
     ['.', '.', '.', '2', '2', '2', '2'],
     ['.', '1', '1', '2', '2', '2', '2'],
     ['.', '1', '1', '2', 'x', 'x', '2'],
     ['.', '1', '1', '.', '3', '3', '.'],
     ['.', '1', '1', '.', '3', '3', '.']]
     """

    def test_claim_not_overlaped(self, input2):
        input_str, expected = input2
        assert claim_not_overlaped(input_str) == expected
